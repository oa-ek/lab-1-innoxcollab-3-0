@page "/deleteprofile/{Id}/{UserName}"
@using BlazorCRUDApp.Shared

@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<h2>Delete Profile</h2>
@if (profile != null)
{
    <p class="">Are you sure you want to delete this profile with User Name: <b>@profile.UserName</b></p>
}
<div class="row">
    <div class="col-md-4">
        <div class="form-group">
            <input type="button" class="btn btn-danger" @onclick="@Delete" value="Delete" />
            <input type="button" class="btn btn-dark" @onclick="@Cancel" value="Cancel" />
        </div>
    </div>
</div>
@code {
    [Parameter]
    public string Id { get; set; }

    [Parameter]
    public string UserName{ get; set; }

    ProfileDto profile = new ProfileDto();

    protected override async Task OnInitializedAsync()
    {
        profile = await Http.GetFromJsonAsync<ProfileDto>("api/profiles/" + UserName);
    }

    protected async Task Delete()
    {
        try
        {
            var response = await Http.DeleteAsync("api/profiles/" + UserName);
            response.EnsureSuccessStatusCode();

            await JsRuntime.InvokeVoidAsync("alert", "Deleted Successfully!");
            NavigationManager.NavigateTo("profilelist");
        }
        catch (HttpRequestException ex)
        {
            if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                await JsRuntime.InvokeVoidAsync("alert", "Profile not found. Please check the UserName and try again.");
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Error deleting profile. Please try again later.");
            }
        }
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("profilelist");
    }
}